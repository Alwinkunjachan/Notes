Normal 
--------------------
class HashTable:
    
    def __init__(self):
        self.MAX = 100
        self.arr = [None for i in range(self.MAX)]
    
    def get_hash(self, key):
        print("hash function called")
        hash = 0
        for char in key:
            hash += ord(char)
        return hash % self.MAX
        
    def __setitem__(self, key, value):
        hash = self.get_hash(key)
        self.arr[hash] = value
    
    def __getitem__(self, key):
        hash = self.get_hash(key)
        return self.arr[hash]
        
    def __delitem__(self, key):
        hash = self.get_hash(key)
        self.arr[hash] = None

h = HashTable()
h['Alwin'] = 1
del h['Alwin']

print(h.arr)

Separate Chaining 
---------------------
class HashTable:
    
    def __init__(self):
        self.MAX = 100
        self.arr = [[] for i in range(self.MAX)]
    
    def get_hash(self, key):
        print("hash function called")
        hash = 0
        for char in key:
            hash += ord(char)
        return hash % self.MAX
        
    def __setitem__(self, key, value):
        hash = self.get_hash(key)
        for index, element in enumerate(self.arr[hash]):
            if element[0] == key:
                self.arr[hash][index] = (key,value)
                return
        self.arr[hash].append((key, value))
    
    def __getitem__(self, key):
        hash = self.get_hash(key)
        for element in self.arr[hash]:
            if element[0] == key:
                return element[1]
                
    def __delitem__(self, key):
        hash = self.get_hash(key)
        for index, element in enumerate(self.arr[hash]):
            if element[0] == key:
                del self.arr[hash][index]

h = HashTable()
h['march 6'] = 1
h['march 17'] = 10

print(h.arr)

Linear Probing
-----------------------

